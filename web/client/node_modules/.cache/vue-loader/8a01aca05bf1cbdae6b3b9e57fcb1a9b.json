{"remainingRequest":"/Users/christopherwang/Code/DeepKey/web/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/christopherwang/Code/DeepKey/web/client/src/components/Create.vue?vue&type=style&index=0&id=3d9b692c&scoped=true&lang=css&","dependencies":[{"path":"/Users/christopherwang/Code/DeepKey/web/client/src/components/Create.vue","mtime":1636168154394},{"path":"/Users/christopherwang/Code/DeepKey/web/client/node_modules/css-loader/dist/cjs.js","mtime":1636130633930},{"path":"/Users/christopherwang/Code/DeepKey/web/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1636130632223},{"path":"/Users/christopherwang/Code/DeepKey/web/client/node_modules/postcss-loader/src/index.js","mtime":1636130632611},{"path":"/Users/christopherwang/Code/DeepKey/web/client/node_modules/cache-loader/dist/cjs.js","mtime":1636130638384},{"path":"/Users/christopherwang/Code/DeepKey/web/client/node_modules/vue-loader/lib/index.js","mtime":1636130632222}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnBlbmRpbmcgewogICAgd2hpdGUtc3BhY2U6IHByZTsKICAgIGNvbG9yOiBncmF5Owp9Ci5jb3JyZWN0IHsKICAgIHdoaXRlLXNwYWNlOiBwcmU7CiAgICBjb2xvcjogZ3JlZW47Cn0KLm1pc3Rha2V7CiAgICB3aGl0ZS1zcGFjZTogcHJlOwogICAgY29sb3I6IHJlZDsKfQo="},{"version":3,"sources":["Create.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Create.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <h1>Create a Typing Sample</h1>\n    <form @submit.prevent=\"addTypingSample\">\n        <div class=\"row\">\n          <div class=\"col-md-6\">\n            <div class=\"form-group\">\n                <label>Prompt:</label> <br/>\n                <span v-for=\"(char, index) in prompt\" :key=\"index\" v-bind:class=\"char.status\">{{char.char}}</span>\n            </div>\n          </div>\n        </div><br/>\n        <div class=\"row\">\n          <div class=\"col-md-6\">\n            <div class=\"form-group\">\n              <textarea class=\"form-control\" \n                v-model=\"body\" rows=\"5\" \n                v-on:keydown=\"pushKeyEvent\" \n                v-on:keyup=\"pushKeyEvent\"\n                />\n            </div>\n          </div>\n        </div><br/>\n        <div class=\"form-group\">\n          <button class=\"btn btn-primary\">Create</button>\n        </div>\n    </form>\n  </div>\n</template>\n\n<script>\n    const STATUS = {\n        PENDING: \"pending\",\n        CORRECT: \"correct\",\n        MISTAKE: \"mistake\"\n    };\n\n    export default {\n        data: function(){\n            return {\n                post: {\n                    body: \"\",\n                    keyEvents: []\n                }\n            }\n        },\n        computed: {\n            prompt: function (){\n                let promptSentence = \"The quick brown fox jumps over the lazy dog\";\n                let promptArray = [];\n                for (let i = 0; i < promptSentence.length; i++){\n                    promptArray[i] = {\n                        char: promptSentence[i],\n                        status: STATUS.PENDING\n                    };\n                }\n                return promptArray;\n            },\n            body: function () {return this.post.body;}\n        },\n        watch:{\n            body: function(){\n                //Change colour of the prompt\n                for (let i = 0; i < this.body.length; i++){\n                        this.prompt[i].status = (this.body[i] == this.prompt[i].char) ? STATUS.CORRECT: STATUS.MISTAKE;\n                }\n                //Reset colour on backspace\n                for (let i = this.body.length; i < this.prompt.length; i++) { \n                    this.prompt[i].status = STATUS.PENDING;\n                }\n                //Reset the keyEvents if the textbox is reset\n                if (this.body.length==0){\n                    this.post.keyEvents = [];\n                }\n            }\n        },\n        methods: {\n            addTypingSample: function (){\n                alert(JSON.stringify(this.post));\n            },\n            pushKeyEvent: function(keyBoardEvent){\n                let keyEvent = {\n                        eventTime: performance.now(),\n                        eventType: keyBoardEvent.type,\n                        altKey: keyBoardEvent.altKey,\n                        code: keyBoardEvent.code,\n                        ctrlKey: keyBoardEvent.ctrlKey,\n                        isComposing: keyBoardEvent.isComposing,\n                        key: keyBoardEvent.key,\n                        locale: keyBoardEvent.locale,\n                        location: keyBoardEvent.key,\n                        metaKey: keyBoardEvent.metaKey,\n                        repeat: keyBoardEvent.repeat,\n                        shiftKey: keyBoardEvent.shiftKey,\n                    };\n                this.post.keyEvents.push(keyEvent);\n            }\n        }\n  }\n</script>\n\n<style scoped>\n    .pending {\n        white-space: pre;\n        color: gray;\n    }\n    .correct {\n        white-space: pre;\n        color: green;\n    }\n    .mistake{\n        white-space: pre;\n        color: red;\n    }\n</style>"]}]}